<?php


namespace App\Http\Livewire;


use App\Enrollment;
use App\Group;
use App\RolMoodle;
use App\StateEnrollment;
use App\Traits\LogsTrail;
use App\Traits\SetParamsTable;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\DateColumn;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Mediconesystems\LivewireDatatables\NumberColumn;

/**
 * Libreria https://github.com/mediconesystems/livewire-datatables
 * Class EnrollmentSearchTable
 * @package App\Http\Livewire
 */
class EnrollmentSearchTable extends LivewireDatatable
{
   use SetParamsTable, LogsTrail;

   public $model       = Enrollment::class;

   public $exportable  = true;

   public $hideable    = 'select';

   protected $listeners = ['setNewDate'];

   public function builder()
   {
      return $this->model::query()
         ->where('enrollments.email', 'like', "%$this->params%")
         ->orWhere('enrollments.code', 'like', "%$this->params%")
         ->orWhere('enrollments.period', 'like', "%$this->params%")
         ->orWhere('enrollments.state', 'like', "%$this->params%")
         ->orWhere('enrollments.rol', 'like', "%$this->params%")
          ->leftJoin('state_enrollments','state_enrollments.id','enrollments.state');
   }
   public function columns()
   {
      $columns = [
         Column::name('code')->label(__('modules.input.code'))->filterable(
            $this->groups->pluck('code')
         )->searchable()->alignRight(),
         Column::name('email')->label(__('modules.input.email'))->filterable()->searchable()->alignRight(),
         Column::name('rol')->label('Rol matrÃ­cula')->filterable(
            $this->roles->pluck('name')
         )->searchable()->alignRight(),
         Column::name('period')->label(__('modules.input.period'))->filterable()->searchable()->alignRight(),
         Column::callback(['state_enrollment.name'], function($name) {
            return Str::title($name);
         })->label(Str::title(__('modules.input.state')))->filterable(
            $this->states->pluck('name')
         )->alignRight(),
         Column::callback(['code', 'email'], function ($code, $email) {
            return Enrollment::lastEntry($code, $email)[0]->ultimoCur ?? 'Nunca';
         })->label("Ãšltimo ingreso")->filterable()->alignRight(),
      ];

      return $columns;
   }

   public function getGroupsProperty()
   {
      return Group::all('code');
   }

   public function getRolesProperty()
   {
      return RolMoodle::all('name');
   }

   public function render()
   {
      $this->emit('stopClear');
      $this->setLog('info', 'BÃºsqueda matrÃ­culas', 'render', __('modules.search.title'));
      return parent::render(); // TODO: Change the autogenerated stub
   }

   public function getStatesProperty()
   {
      return StateEnrollment::select(['id', 'name'])->where('state', 1)->get();
   }
}
