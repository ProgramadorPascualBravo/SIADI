<?php

namespace App\Http\Livewire;

use App\Student;
use App\Traits\DeleteMassive;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;
use Mediconesystems\LivewireDatatables\BooleanColumn;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\DateColumn;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Mediconesystems\LivewireDatatables\NumberColumn;


/**
 *  Libreria https://github.com/mediconesystems/livewire-datatables
 * Class StudentTable
 * @package App\Http\Livewire
 */
class StudentTable extends LivewireDatatable
{

    use DeleteMassive;

    public $model = Student::class;

    public $hideable = 'select';

    public $exportable = true;

    public $beforeTableSlot = 'fragments.delete-massive';

    public $relation     = 'student';

    protected $listeners = ['refreshLivewireDatatable'];

    public function builder()
    {
        return $this->model::query();
    }


    public function columns()
    {
        $relation = $this->relation;
        $columns = [
            Column::checkbox(),
            Column::name('name')->label(Str::title(__('modules.input.names')))->filterable()->searchable(),
            Column::name('last_name')->label(Str::title(__('modules.input.last_name')))->filterable()->searchable(),
            Column::name('email')->label(Str::title(__('modules.input.email')))->filterable()->searchable(),
            Column::name('document')->label(Str::title(__('modules.input.document')))->filterable()->searchable(),
            Column::name('personalmail')->label('Correo Personal')->filterable()->searchable(),
            Column::name('phone')->label('Telefono Fijo')->filterable()->searchable(),
            Column::name('cellphone')->label('Telefono Celular')->filterable()->searchable(),
            BooleanColumn::name('state')->label('Estado')->filterable(),
            NumberColumn::name('enrollments.id:count')->label('# MatrÃ­culas')->filterable()->alignCenter(),
            DateColumn::name('created_at')->label(Str::title(__('modules.table.created')))->filterable(),
            Column::callback(['id'], function ($id){
               return view('fragments.link-to', ['route' => 'moodle-detail', 'params' => ['id' => $id]]);
            })->label(Str::title(__('modules.table.detail')))->alignCenter()->excludeFromExport(),
            Column::callback(['id', 'name'], function ($id){
              return view('fragments.btn-action-reset-password', ['action' => 'reset', 'value' => $id, 'name' => 'Reiniciar']);
            })->label(Str::title(__('modules.table.reset-password')))->alignCenter()->excludeFromExport(),
        ];
        if (Auth::user()->can('moodle_write')) {
           array_push($columns, Column::name('id')->view('livewire.datatables.edit')->label('Editar')->alignCenter()->excludeFromExport());
        }
        if (Auth::user()->can('moodle_destroy')){
           array_push($columns, Column::callback(['id', 'document'], function ($id) use ($relation){
              return view('fragments.btn-action-delete', [
                 'value' => $id, 'relation' => $relation
              ]);
           })->label('Eliminar')->alignCenter()->hide()->excludeFromExport());
        }

        return $columns;
    }

    public function refreshLivewireDatatable()
    {
       parent::refreshLivewireDatatable(); // TODO: Change the autogenerated stub
    }

   public function reset_password($id)
   {
      try {
         $student             = Student::find($id);
         $student->password   = md5($student->document);
         if ($student->save()) {
            $this->emit('showAlert', 'alert-success', __('messages.success.update'));
            $this->setLog('info', __('messages.success.update'), 'reset_password', __('modules.moodle.title'), [
               'info' => 'Password reset', 'user' => $student
            ]);

         } else {
            $this->emit('showAlert', 'alert-error', __('messages.error.update'));
            $this->setLog('error', __('messages.errors.update'), 'reset_password', __('modules.moodle.title'), [
               'info' => 'Not password reset', 'user' => $student
            ]);
         }
      } catch (QueryException $exception) {
         $this->emit('showAlert', 'alert-error', __('messages.error.update'));
         $this->setLog('error', __('messages.errors.update'), 'reset_password', __('modules.moodle.title'), [
            'exception' => $exception->getMessage()
         ]);
      }
   }


   public function edit($id)
   {
       $this->emit('edit', $id);
   }

}
