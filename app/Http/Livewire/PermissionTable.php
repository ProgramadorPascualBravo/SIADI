<?php


namespace App\Http\Livewire;


use App\User;
use Illuminate\Support\Facades\Auth;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;

/**
 * Libreria https://github.com/mediconesystems/livewire-datatables
 * Class PermissionTable
 * @package App\Http\Livewire
 */

class PermissionTable extends LivewireDatatable
{
   public $model = Permission::class;

   public $search = false, $role_id = null;

   public $title = "Asignar Permiso";

   protected $listeners = ['refreshLivewireDatatable', 'refreshTableCustom'];

   public $afterTableSlot = 'livewire.permission-role.select';

   public function builder()
   {

      if (!is_null($this->role_id) and !empty($this->role_id)) {
         $this->selected = [];
         foreach (Role::findById($this->role_id)->permissions->toArray() as $permission) {
            array_push($this->selected, $permission['name']);
         }
         $this->role_id = null;
      }
      return $this->model::query();
   }

   public function columns()
   {
      $columns = [
         Column::name('name')->filterable()->label(__('modules.input.name')),
         Column::callback(['name'], function ($name){
            return User::permission($name)->count();
         })->label('Roles con el permiso')->filterable(),
         Column::checkbox('name')->label('Asignar'),
      ];
      if (Auth::user()->can('permission_write')) {
         array_push($columns, Column::name('id')->view('livewire.datatables.edit')->label('Editar')->alignRight());
      }
      return $columns;
   }

   public function assign()
   {
      $this->emit('assign', $this->selected);
   }

   public function edit($id)
   {
      $this->emit('edit', $id);
   }

   public function refreshTableCustom($role_id)
   {
      $this->role_id = $role_id;
      parent::refreshLivewireDatatable(); // TODO: Change the autogenerated stub
   }
}