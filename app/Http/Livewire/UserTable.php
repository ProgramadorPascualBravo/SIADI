<?php
namespace App\Http\Livewire;

use App\Student;
use App\Traits\DeleteMassive;
use App\User;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Mediconesystems\LivewireDatatables\BooleanColumn;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\DateColumn;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;

/**
 * Libreria https://github.com/mediconesystems/livewire-datatables
 * Class UserTable
 * @package App\Http\Livewire
 */

class UserTable extends LivewireDatatable
{

   use DeleteMassive;

   public $model        = User::class;

   public $hideable     = 'select';

   public $exportable   = true;

   public $beforeTableSlot = 'fragments.delete-massive';

   protected $listeners = ['refreshLivewireDatatable'];

   public $relation     = 'user';

   public function builder()
   {
      //TODO Datos segÃºn departamento
      //return $this->model::query()->where('users.department_id', Auth::user()->department_id); // TODO: Change the autogenerated stub
      //return $this->model::query();
       return User::query()->join('departments', 'departments.id', '=', 'users.department_id');
   }

   public function columns() : array
   {
      $relation = $this->relation;
      $columns = [
         Column::checkbox('id'),
         Column::name('name')->label(Str::title(__('modules.input.names')))->filterable()->searchable(),
         Column::name('last_name')->label(Str::title(__('modules.input.last_name')))->filterable()->searchable(),
         Column::name('document')->label(Str::title(__('modules.input.document')))->filterable()->searchable(),
         Column::name('username')->label('Email')->filterable()->searchable(),
         BooleanColumn::name('state')->label(Str::title(__('modules.input.state')))->filterable(),
         Column::name('departments.name')->filterable()->label(Str::title(__('modules.category.name'))),
         DateColumn::name('created_at')->label(Str::title(__('modules.table.created')))->filterable(),
         Column::callback(['id', 'name'], function ($id){
            return view('fragments.btn-action-reset-password', ['action' => 'reset', 'value' => $id, 'name' => 'Reiniciar']);
         })->label(Str::title(__('modules.table.reset-password')))->alignCenter()->excludeFromExport(),
      ];
      if (Auth::user()->can('user_detail')) {
         array_push($columns,  Column::callback(['id'], function ($id){
            return view('fragments.link-to', ['route' => 'user-detail', 'params' => ['id' => $id]]);
         })->label(Str::title(__('modules.table.detail')))->alignCenter()->excludeFromExport());
      }
      if (Auth::user()->can('user_write')) {
         array_push($columns, Column::name('id')->view('livewire.datatables.edit')->label('Editar')->alignCenter()->excludeFromExport());
      }
      if (Auth::user()->can('user_destroy')){
         array_push($columns, Column::callback(['id', 'document'], function ($id) use ($relation){
            return view('fragments.btn-action-delete', [
               'value' => $id, 'relation' => $relation
            ]);
         })->label('Eliminar')->alignCenter()->hide()->excludeFromExport());
      }

      return $columns;
   }

   public function refreshLivewireDatatable()
   {
      parent::refreshLivewireDatatable(); // TODO: Change the autogenerated stub
   }

   public function reset_password($id)
   {
      try {
         $user             = User::find($id);
         $user->password   = Hash::make($user->document);
         if ($user->save()) {
            $this->emit('showAlert', 'alert-success', __('messages.success.update'));
            $this->setLog('info', __('messages.success.update'), 'update', __('modules.user.title'), [
               'info' => 'Password reset', 'user' => $user
            ]);
         } else {
            $this->emit('showAlert', 'alert-error', __('messages.errors.update'));
            $this->setLog('error', __('messages.errors.update'), 'update', __('modules.user.title'), [
               'info' => 'Not password reset', 'user' => $user
            ]);
         }

      } catch (QueryException $exception) {
         $this->emit('showAlert', 'alert-error', __('messages.errors.update'));
         $this->setLog('error', __('messages.errors.update'), 'update', __('modules.user.title'), [
            'info' => 'Not password reset'
         ]);
      }
   }

   public function edit($id)
   {
      $this->emit('edit', $id);
   }
}
